name: CI/CD Pipeline

on:
  push:
    branches: [ main, bug_fix ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  SUPABASE_URL: ${{ vars.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Prepare database roles
      run: |
        psql -h localhost -U postgres -tc "SELECT 1 FROM pg_roles WHERE rolname='root'" | grep -q 1 || psql -h localhost -U postgres -c "CREATE ROLE root WITH LOGIN PASSWORD 'root';"
      env:
        PGPASSWORD: postgres

    - name: Run tests
      run: |
        poetry run pytest --cov=src --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        PYTHONPATH: src

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  migration-check:
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: migration_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install

    - name: Prepare database roles
      run: |
        psql -h localhost -U postgres -tc "SELECT 1 FROM pg_roles WHERE rolname='root'" | grep -q 1 || psql -h localhost -U postgres -c "CREATE ROLE root WITH LOGIN PASSWORD 'root';"
      env:
        PGPASSWORD: postgres

    - name: Apply migrations
      run: |
        poetry run alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_db

    - name: Check migration status
      run: |
        poetry run alembic current
        poetry run alembic check
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_db

    - name: Generate migration script (if needed)
      run: |
        if ! poetry run alembic check; then
          echo "Migrations need to be generated"
          poetry run alembic revision --autogenerate -m "Auto-generated migration"
        fi
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_db

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, migration-check]
    if: github.ref == 'refs/heads/bug_fix' && github.event_name == 'push'
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
    - uses: actions/checkout@v4

    - name: Determine Vercel eligibility
      id: staging_vercel_check
      run: |
        if [ -z "${VERCEL_TOKEN}" ] || [ -z "${VERCEL_ORG_ID}" ] || [ -z "${VERCEL_PROJECT_ID}" ]; then
          echo "Vercel secrets missing; skipping staging deploy."
          echo "should_deploy=false" >> "$GITHUB_OUTPUT"
        else
          echo "should_deploy=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod=false'
      if: steps.staging_vercel_check.outputs.should_deploy == 'true'

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, migration-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
    - uses: actions/checkout@v4

    - name: Determine Vercel eligibility
      id: production_vercel_check
      run: |
        if [ -z "${VERCEL_TOKEN}" ] || [ -z "${VERCEL_ORG_ID}" ] || [ -z "${VERCEL_PROJECT_ID}" ]; then
          echo "Vercel secrets missing; skipping production deploy."
          echo "should_deploy=false" >> "$GITHUB_OUTPUT"
        else
          echo "should_deploy=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod=true'
      if: steps.production_vercel_check.outputs.should_deploy == 'true'

  migrate-production:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    env:
      DATABASE_URL: ${{ coalesce(secrets.DATABASE_URL, vars.DATABASE_URL) }}

    steps:
    - uses: actions/checkout@v4

    - name: Check database URL
      id: db_url_check
      run: |
        if [ -z "${DATABASE_URL}" ]; then
          echo "DATABASE_URL secret is missing; skipping migrations."
          echo "should_migrate=false" >> "$GITHUB_OUTPUT"
        else
          echo "should_migrate=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
      if: steps.db_url_check.outputs.should_migrate == 'true'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      if: steps.db_url_check.outputs.should_migrate == 'true'

    - name: Install dependencies
      run: |
        poetry install
      if: steps.db_url_check.outputs.should_migrate == 'true'

    - name: Run database migrations
      run: |
        echo "Applying database migrations..."
        poetry run alembic upgrade head
        echo "Migrations applied successfully"
      if: steps.db_url_check.outputs.should_migrate == 'true'

    - name: Verify migration success
      run: |
        poetry run alembic current
        echo "Migration verification completed"
      if: steps.db_url_check.outputs.should_migrate == 'true'
